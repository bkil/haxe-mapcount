// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_7_main,"Main","main",0xed0e206e,"Main.main","Main.hx",7,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_4_main,"Main","main",0xed0e206e,"Main.main","Main.hx",4,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run(::String clientId, ::haxe::ds::StringMap map){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,clientId) HXARGC(1)
            			bool _hx_run( ::haxe::ds::StringMap entry){
            				HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_7_main)
HXLINE(   7)				return entry->exists(clientId);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_7_main)
HXLINE(   7)			return ::Lambda_obj::count(map, ::Dynamic(new _hx_Closure_0(clientId)));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_4_main)
HXLINE(   5)		 ::Dynamic countClient =  ::Dynamic(new _hx_Closure_1());
HXLINE(  10)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  10)		{
HXLINE(  11)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  11)			_g1->set(HX_("OSX",b4,3a,3c,00),HX_("1",31,00,00,00));
HXDLIN(  11)			_g1->set(HX_("QNX",db,ba,3d,00),HX_("2",32,00,00,00));
HXLINE(  10)			_g->set(HX_("Balu",28,0e,ea,2b),_g1);
            		}
HXDLIN(  10)		{
HXLINE(  12)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  12)			_g2->set(HX_("OSX",b4,3a,3c,00),HX_("3",33,00,00,00));
HXLINE(  10)			_g->set(HX_("Tomi",b7,85,da,37),_g2);
            		}
HXDLIN(  10)		{
HXLINE(  13)			 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  13)			_g3->set(HX_("QNX",db,ba,3d,00),HX_("4",34,00,00,00));
HXLINE(  10)			_g->set(HX_("Zsoc",2d,d8,d4,3b),_g3);
            		}
HXDLIN(  10)		 ::haxe::ds::StringMap map = _g;
HXLINE(  15)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  15)		int _hx_tmp1 = ( (int)(countClient(HX_("OSX",b4,3a,3c,00),map)) );
HXDLIN(  15)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("Main.hx",05,5c,7e,08),15,HX_("Main",59,64,2f,33),HX_("main",39,38,56,48)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

