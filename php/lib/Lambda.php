<?php
/**
 * Generated by Haxe 4.2.1
 */

use \php\Boot;

/**
 * The `Lambda` class is a collection of methods to support functional
 * programming. It is ideally used with `using Lambda` and then acts as an
 * extension to Iterable types.
 * On static platforms, working with the Iterable structure might be slower
 * than performing the operations directly on known types, such as Array and
 * List.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 * @see https://haxe.org/manual/std-Lambda.html
 */
class Lambda {
	/**
	 * Returns the number of elements in `it` for which `pred` is true, or the
	 * total number of elements in `it` if `pred` is null.
	 * This function traverses all elements.
	 * 
	 * @param object $it
	 * @param \Closure $pred
	 * 
	 * @return int
	 */
	public static function count ($it, $pred = null) {
		#/usr/share/haxe/std/Lambda.hx:210: characters 3-13
		$n = 0;
		#/usr/share/haxe/std/Lambda.hx:211: lines 211-217
		if ($pred === null) {
			#/usr/share/haxe/std/Lambda.hx:212: characters 14-16
			$_ = $it->iterator();
			while ($_->hasNext()) {
				#/usr/share/haxe/std/Lambda.hx:212: lines 212-213
				$_1 = $_->next();
				#/usr/share/haxe/std/Lambda.hx:213: characters 5-8
				++$n;
			}
		} else {
			#/usr/share/haxe/std/Lambda.hx:215: characters 14-16
			$x = $it->iterator();
			while ($x->hasNext()) {
				#/usr/share/haxe/std/Lambda.hx:215: lines 215-217
				$x1 = $x->next();
				#/usr/share/haxe/std/Lambda.hx:216: lines 216-217
				if ($pred($x1)) {
					#/usr/share/haxe/std/Lambda.hx:217: characters 6-9
					++$n;
				}
			}
		}
		#/usr/share/haxe/std/Lambda.hx:218: characters 3-11
		return $n;
	}
}

Boot::registerClass(Lambda::class, 'Lambda');
