<?php
/**
 * Generated by Haxe 4.2.1
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \haxe\ds\StringMap;

class Main {
	/**
	 * @return void
	 */
	public static function main () {
		#Main.hx:5: lines 5-8
		$countClient = function ($clientId, $map) {
			#Main.hx:7: characters 13-62
			return \Lambda::count($map, function ($entry) use (&$clientId) {
				#Main.hx:7: characters 39-61
				return array_key_exists($clientId, $entry->data);
			});
		};
		#Main.hx:10: lines 10-14
		$_g = new StringMap();
		#Main.hx:11: characters 23-51
		$_g1 = new StringMap();
		$_g1->data["OSX"] = "1";
		$_g1->data["QNX"] = "2";
		#Main.hx:10: lines 10-14
		$_g->data["Balu"] = $_g1;
		#Main.hx:12: characters 23-37
		$_g1 = new StringMap();
		$_g1->data["OSX"] = "3";
		#Main.hx:10: lines 10-14
		$_g->data["Tomi"] = $_g1;
		#Main.hx:13: characters 23-37
		$_g1 = new StringMap();
		$_g1->data["QNX"] = "4";
		#Main.hx:10: lines 10-14
		$_g->data["Zsoc"] = $_g1;
		$map = $_g;
		#Main.hx:15: characters 9-14
		(Log::$trace)($countClient("OSX", $map), new _HxAnon_Main0("Main.hx", 15, "Main", "main"));
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

class _HxAnon_Main0 extends HxAnon {
	function __construct($fileName, $lineNumber, $className, $methodName) {
		$this->fileName = $fileName;
		$this->lineNumber = $lineNumber;
		$this->className = $className;
		$this->methodName = $methodName;
	}
}

Boot::registerClass(Main::class, 'Main');
