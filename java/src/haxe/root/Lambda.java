// Generated by Haxe 4.2.1
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Lambda extends haxe.lang.HxObject
{
	public Lambda(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Lambda()
	{
		//line 39 "/usr/share/haxe/std/Lambda.hx"
		haxe.root.Lambda.__hx_ctor__Lambda(this);
	}
	
	
	protected static void __hx_ctor__Lambda(haxe.root.Lambda __hx_this)
	{
	}
	
	
	public static <A> int count(java.lang.Object it, haxe.lang.Function pred)
	{
		//line 210 "/usr/share/haxe/std/Lambda.hx"
		int n = 0;
		//line 211 "/usr/share/haxe/std/Lambda.hx"
		if (( pred == null )) 
		{
			//line 212 "/usr/share/haxe/std/Lambda.hx"
			java.lang.Object _1 = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 212 "/usr/share/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(_1, "hasNext", null)) )))
			{
				//line 212 "/usr/share/haxe/std/Lambda.hx"
				A _2 = ((A) (haxe.lang.Runtime.callField(_1, "next", null)) );
				//line 213 "/usr/share/haxe/std/Lambda.hx"
				 ++ n;
			}
			
		}
		else
		{
			//line 215 "/usr/share/haxe/std/Lambda.hx"
			java.lang.Object x = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 215 "/usr/share/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(x, "hasNext", null)) )))
			{
				//line 215 "/usr/share/haxe/std/Lambda.hx"
				A x1 = ((A) (haxe.lang.Runtime.callField(x, "next", null)) );
				//line 216 "/usr/share/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (((haxe.lang.Function) (pred) ).__hx_invoke1_o(0.0, x1)) ))) 
				{
					//line 217 "/usr/share/haxe/std/Lambda.hx"
					 ++ n;
				}
				
			}
			
		}
		
		//line 218 "/usr/share/haxe/std/Lambda.hx"
		return n;
	}
	
	
}


