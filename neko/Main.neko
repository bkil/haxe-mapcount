@classes = $new(null);
@enum_to_string = function()
    return neko.Boot.__enum_str(this)
@serialize = function()
    return neko.Boot.__serialize(this)
@tag_serialize = function()
    return neko.Boot.__tagserialize(this)
@lazy_error = function(e)
    return $varargs(function(_)
        return $throw(e)
    )
@default__string = function()
    return {
        var @s = this.toString();
        if $typeof(@s) != $tobject
            return null;
        return @s.__s;
    }

@closure0 = function(@this,@fun)
    return if @fun == null
        null
    else
        function() {
            this = @this;
            @fun();
        }


@closure1 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a) {
            this = @this;
            @fun(a);
        }


@closure2 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b) {
            this = @this;
            @fun(a,b);
        }


@closure3 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c) {
            this = @this;
            @fun(a,b,c);
        }


@closure4 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d) {
            this = @this;
            @fun(a,b,c,d);
        }


@closure5 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d,e) {
            this = @this;
            @fun(a,b,c,d,e);
        }


{
}
neko = $new(null);
@classes.neko = neko;
haxe = $new(null);
@classes.haxe = haxe;
haxe._Int64 = $new(null);
haxe._NativeStackTrace = $new(null);
haxe.ds = $new(null);
haxe.ds._List = $new(null);
haxe.io = $new(null);
haxe.iterators = $new(null);
neko.vm = $new(null);
sys = $new(null);
@classes.sys = sys;
{
    var @tmp = $new(null);
    neko.@Lib = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Lib = @tmp;
    @tmp.prototype = neko.@Lib;
    @tmp.rethrow = function(e) {
        return $rethrow(e);
    }
    @tmp.load = function(lib,prim,nargs) {
        return $loader.loadprim(( (lib + String.new("@")) + prim ).__s,nargs);
    }
    neko.@Lib.__class__ = neko.Lib;
}
{
    var @tmp = $new(null);
    @Array = @tmp;
    @tmp.unshift = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        var a = this.__a;
        $ablit(a,1,a,0,l);
        a[0] = x;
        return null;
    }
    @tmp.toString = function() {
        if ( Array.__hx_toString_depth >= 5 )
            return String.new("...");
        var s = StringBuf.new();
        StringBuf.__add(s.b,String.new("["));
        var it_current = 0;
        Array.__hx_toString_depth ++= 1;
        try {
            while ( it_current < this.length ) {
                StringBuf.__add(s.b,this[it_current ++= 1]);
                if ( it_current < this.length )
                    StringBuf.__add_char(s.b,44);
            }
            Array.__hx_toString_depth --= 1;
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var _g = @tmp;
                {
                    {
                        null;
                    }
                    var _g = haxe.Exception.caught(_g).unwrap();
                    {
                        Array.__hx_toString_depth --= 1;
                        neko.Lib.rethrow(_g);
                    }
                }
            }
            else
                $rethrow(@tmp)
        }
        StringBuf.__add(s.b,String.new("]"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.splice = function(pos,len) {
        if ( len < 0 )
            return Array.new();
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > this.length ) {
            pos = 0;
            len = 0;
        }
        else
            if ( (pos + len) > this.length ) {
                len = (this.length - pos);
                if ( len < 0 )
                    len = 0;
            }

        var a = this.__a;
        var ret = Array.new1($asub(a,pos,len),len);
        var end = pos + len;
        {
            var length = this.length - end;
            $ablit(a,pos,a,end,length);
        }
        this.length -= len;
        while ( (len -= 1) >= 0 )
            a[this.length + len] = null
        return ret;
    }
    @tmp.sort = function(f) {
        var a = this.__a;
        var i = 0;
        var l = this.length;
        while ( i < l ) {
            var swap = false;
            var j = 0;
            var max = (l - i) - 1;
            while ( j < max ) {
                if ( f(a[j],a[j + 1]) > 0 ) {
                    var tmp = a[j + 1];
                    a[j + 1] = a[j];
                    a[j] = tmp;
                    swap = true;
                }
                j += 1;
            }
            if ( $not(swap) )
                break;;
            i += 1;
        }
        return null;
    }
    @tmp.slice = function(pos,end) {
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( end == null )
            end = this.length
        else
            if ( end < 0 )
                end = (this.length + end);

        if ( end > this.length )
            end = this.length;
        var len = end - pos;
        if ( len < 0 )
            return Array.new();
        var a = this.__a;
        return Array.new1($asub(a,pos,len),len);
    }
    @tmp.shift = function() {
        var l = this.length;
        if ( l == 0 )
            return null;
        var a = this.__a;
        var x = a[0];
        l -= 1;
        $ablit(a,0,a,1,l);
        a[l] = null;
        this.length = l;
        return x;
    }
    @tmp.reverse = function() {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        var half = (l --= 1) >> 1;
        while ( i < half ) {
            var tmp = a[i];
            a[i] = a[l - i];
            a[l - i] = tmp;
            i += 1;
        }
        return null;
    }
    @tmp.resize = function(len) {
        if ( this.length < len )
            this.__set(len - 1,null)
        else
            if ( this.length > len ) {
                {
                    var _g = len;
                    var _g1 = this.length;
                    while ( _g < _g1 )
                        this.__a[_g ++= 1] = null
                }
                this.length = len;
            }

        return null;
    }
    @tmp.remove = function(x) {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        while ( i < l ) {
            if ( a[i] == x ) {
                $ablit(a,i,a,i + 1,(l - i) - 1);
                l -= 1;
                this.length = l;
                a[l] = null;
                return true;
            }
            i += 1;
        }
        return false;
    }
    @tmp.push = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        this.__a[l] = x;
        return l + 1;
    }
    @tmp.pop = function() {
        if ( this.length == 0 )
            return null;
        this.length -= 1;
        var x = this.__a[this.length];
        this.__a[this.length] = null;
        return x;
    }
    @tmp.map = function(f) {
        var l = this.length;
        var ret = Array.new1($amake(l),l);
        {
            var _g = 0;
            var _g1 = l;
            while ( _g < _g1 ) {
                var i = _g ++= 1;
                ret[i] = f(this[i]);
            }
        }
        return ret;
    }
    @tmp.length = null;
    @tmp.lastIndexOf = function(x,fromIndex) {
        var len = this.length;
        var i = if ( fromIndex != null )
            fromIndex
        else
            len - 1
        ;
        var a = this.__a;
        if ( i >= len )
            i = (len - 1)
        else
            if ( i < 0 )
                i += len;

        while ( i >= 0 ) {
            if ( a[i] == x )
                return i;
            i -= 1;
        }
        return -1;
    }
    @tmp.keyValueIterator = function() {
        return haxe.iterators.ArrayKeyValueIterator.new(this);
    }
    @tmp.join = function(sep) {
        var s = StringBuf.new();
        var a = this.__a;
        var max = this.length - 1;
        {
            var _g = 0;
            var _g1 = this.length;
            while ( _g < _g1 ) {
                var p = _g ++= 1;
                StringBuf.__add(s.b,a[p]);
                if ( p != max )
                    StringBuf.__add(s.b,sep);
            }
        }
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.iterator = function() {
        return haxe.iterators.ArrayIterator.new(this);
    }
    @tmp.insert = function(pos,x) {
        var l = this.length;
        if ( pos < 0 ) {
            pos = (l + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > l )
            pos = l;
        this.__grow(l + 1);
        var a = this.__a;
        $ablit(a,pos + 1,a,pos,l - pos);
        a[pos] = x;
        return null;
    }
    @tmp.indexOf = function(x,fromIndex) {
        var len = this.length;
        var i = if ( fromIndex != null )
            fromIndex
        else
            0
        ;
        var a = this.__a;
        if ( i < 0 ) {
            i += len;
            if ( i < 0 )
                i = 0;
        }
        while ( i < len ) {
            if ( a[i] == x )
                return i;
            i += 1;
        }
        return -1;
    }
    @tmp.filter = function(f) {
        var ret = Array.new1($array(),0);
        {
            var _g = 0;
            while ( _g < this.length ) {
                var elt = this[_g];
                _g += 1;
                if ( f(elt) )
                    ret.push(elt);
            }
        }
        return ret;
    }
    @tmp.copy = function() {
        var a = this.__a;
        var len = this.length;
        return Array.new1($asub(a,0,len),this.length);
    }
    @tmp.contains = function(x) {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        while ( i < l ) {
            if ( a[i] == x )
                return true;
            i += 1;
        }
        return false;
    }
    @tmp.concat = function(a) {
        var a1 = this.__a;
        var a2 = a.__a;
        var s1 = this.length;
        var s2 = a.length;
        var a = $amake(s1 + s2);
        $ablit(a,0,a1,0,s1);
        $ablit(a,s1,a2,0,s2);
        return Array.new1(a,s1 + s2);
    }
    @tmp.__set = function(pos,v) {
        var a = this.__a;
        if ( this.length <= pos ) {
            var l = pos + 1;
            var dlen = l - $asize(a);
            if ( dlen > 0 ) {
                if ( dlen == 1 ) {
                    this.__grow(l);
                    a = this.__a;
                }
                else {
                    a = $amake(l);
                    {
                        var src = this.__a;
                        var length = this.length;
                        $ablit(a,0,src,0,length);
                    }
                    this.__a = a;
                }
            }
            this.length = l;
        }
        a[pos] = v;
        return v;
    }
    @tmp.__neko = function() {
        var a = this.__a;
        if ( $asize(a) != this.length ) {
            var len = this.length;
            a = $asub(a,0,len);
            this.__a = a;
        }
        return a;
    }
    @tmp.__grow = function(l) {
        var a = this.__a;
        var sz = $asize(a);
        if ( sz >= l ) {
            this.length = l;
            return null;
        }
        var big = (sz * 3) >> 1;
        if ( big < l )
            big = l;
        var a2 = $amake(big);
        {
            var length = this.length;
            $ablit(a2,0,a,0,length);
        }
        this.__a = a2;
        this.length = l;
        return null;
    }
    @tmp.__get = function(pos) {
        return this.__a[pos];
    }
    @tmp.__a = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    Array = @tmp;
    @tmp.prototype = @Array;
    @tmp.new1 = function(a,l) {
        var inst = Array.new();
        inst.__a = a;
        inst.length = l;
        return inst;
    }
    @tmp.__hx_toString_depth = null;
    @tmp.__construct__ = function() {
        this.__a = $amake(0);
        this.length = 0;
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@Array);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @Array.__class__ = Array;
    @classes.Array = Array;
}
{
    var @tmp = $new(null);
    @Date = @tmp;
    @tmp.toString = function() {
        return String.new(Date.date_format(this.__t,null));
    }
    @tmp.__t = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    Date = @tmp;
    @tmp.prototype = @Date;
    @tmp.date_set_hour = $loader.loadprim(("std" + "@") + "date_set_hour",4);
    @tmp.date_set_day = $loader.loadprim(("std" + "@") + "date_set_day",4);
    @tmp.date_format = $loader.loadprim(("std" + "@") + "date_format",2);
    @tmp.__string = function() {
        return String.new("Date").__s;
    }
    @tmp.__construct__ = function(year,month,day,hour,min,sec) {
        this.__t = Date.date_set_day(0,year,month + 1,day);
        this.__t = Date.date_set_hour(this.__t,hour,min,sec);
        return null;
    }
    @tmp.new = function(year,month,day,hour,min,sec) {
        var @o = $new(null);
        $objsetproto(@o,@Date);
        $call(this.__construct__,@o,$array(year,month,day,hour,min,sec));
        return @o;
    }
    @Date.__class__ = Date;
    @classes.Date = Date;
}
{
    var @tmp = $new(null);
    @Math = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Math = @tmp;
    @tmp.prototype = @Math;
    @tmp.random = function() {
        return Math._rand_float(Math.__rnd);
    }
    @tmp.min = function(a,b) {
        if ( a < b )
            return a
        else
            if ( $isnan(a) )
                return a
            else
                return b

        return null;
    }
    @tmp.max = function(a,b) {
        if ( a < b )
            return b
        else
            if ( $isnan(b) )
                return b
            else
                return a

        return null;
    }
    @tmp.isNaN = function(f) {
        return $isnan(f);
    }
    @tmp.isFinite = function(f) {
        return $not(( $isinfinite(f) || $isnan(f) ));
    }
    @tmp._rand_int = $loader.loadprim(("std" + "@") + "random_int",2);
    @tmp._rand_float = $loader.loadprim(("std" + "@") + "random_float",1);
    @tmp.__rnd = null;
    @Math.__class__ = Math;
    @classes.Math = Math;
}
{
    var @tmp = $new(null);
    neko.@Boot = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Boot = @tmp;
    @tmp.prototype = neko.@Boot;
    @tmp.__unserialize = function(v) {
        if ( $typeof(v) != $tarray )
            $throw(haxe.Exception.thrown(String.new("Invalid serialized class data")));
        {
            var _g = 0;
            var _g1 = $asize(v);
            while ( _g < _g1 ) {
                var i = _g ++= 1;
                if ( $typeof(v[i]) != $tstring )
                    $throw(haxe.Exception.thrown(String.new("Invalid serialized class data")));
            }
        }
        var cl = neko.Boot.__classes;
        {
            var _g = 0;
            var _g1 = $asize(v);
            while ( _g < _g1 ) {
                var i = _g ++= 1;
                cl = $objget(cl,$hash(v[i]));
                if ( cl == null )
                    $throw(haxe.Exception.thrown(String.new("Class not found ") + Std.string(v)));
            }
        }
        if ( $typeof(cl) == $tobject ) {
            if ( (cl.__name__ != null) || (cl.__ename__ != null) )
                return cl.prototype;
            if ( (cl.__enum__ != null) && ($typeof(cl.tag) == $tstring) )
                return cl;
        }
        $throw(haxe.Exception.thrown(String.new("Invalid class ") + Std.string(v)));
        return null;
    }
    @tmp.__tmp_str = function() {
        return String.new("<...>").__s;
    }
    @tmp.__tagserialize = function(o) {
        var n = o.__enum__.__ename__;
        var x = $amake(n.length + 1);
        {
            var _g = 0;
            var _g1 = n.length;
            while ( _g < _g1 ) {
                var i = _g ++= 1;
                x[i] = n[i].__s;
            }
        }
        x[n.length] = o.tag;
        return x;
    }
    @tmp.__serialize = function(o) {
        if ( o.__class__ != null ) {
            var n = o.__class__.__name__;
            var x = $amake(n.length);
            {
                var _g = 0;
                var _g1 = n.length;
                while ( _g < _g1 ) {
                    var i = _g ++= 1;
                    x[i] = n[i].__s;
                }
            }
            return x;
        }
        if ( o.__enum__ != null ) {
            var n = o.__enum__.__ename__;
            var x = $amake(n.length);
            {
                var _g = 0;
                var _g1 = n.length;
                while ( _g < _g1 ) {
                    var i = _g ++= 1;
                    x[i] = n[i].__s;
                }
            }
            return x;
        }
        $throw(haxe.Exception.thrown(String.new("Can't serialize")));
        return null;
    }
    @tmp.__interfLoop = function(cc,cl) {
        while ( true ) {
            if ( cc == null )
                return false;
            if ( cc == cl )
                return true;
            var intf = cc.__interfaces__;
            if ( intf != null ) {
                var _g = 0;
                var _g1 = intf.length;
                while ( _g < _g1 ) {
                    var i = intf[_g ++= 1];
                    if ( (i == cl) || neko.Boot.__interfLoop(i,cl) )
                        return true;
                }
            }
            cc = cc.__super__;
        }
        return null;
    }
    @tmp.__instanceof = function(o,cl) {
        if ( cl == Dynamic )
            return o != null;
        switch ( $typeof(o) ){
        1 => 
            if ( cl != Int )
                return cl == Float
            else
                return true

        2 => 
            if ( cl != Float ) {
                if ( cl == Int )
                    return $int(o) == o
                else
                    return false
            }
            else
                return true

        3 => 
            return cl == Bool
        5 => 
            {
                if ( cl == null )
                    return false;
                if ( $not(( (neko.Boot.__interfLoop(o.__class__,cl) || (o.__enum__ == cl)) || ((cl == Class) && (o.__name__ != null)) )) ) {
                    if ( cl == Enum )
                        return o.__ename__ != null
                    else
                        return false
                }
                else
                    return true
            }

        default => 
            return false
        }
        return null;
    }
    @tmp.__init = function() {
        $exports.__unserialize = neko.Boot.__unserialize;
        $exports.__classes = neko.Boot.__classes;
        return null;
    }
    @tmp.__enum_str = function(e) {
        if ( e.args == null )
            return e.tag;
        var s = e.tag + String.new("(").__s;
        var i = 0;
        var l = $asize(e.args);
        var old = e.__string;
        e.__string = neko.Boot.__tmp_str;
        while ( i < l ) {
            if ( i != 0 )
                s += String.new(",").__s;
            try {
                s += $string(e.args[i]);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var _g = @tmp;
                    {
                        {
                            null;
                        }
                        s += neko.Boot.__tmp_str();
                    }
                }
                else
                    $rethrow(@tmp)
            }
            i += 1;
        }
        e.__string = old;
        return s + String.new(")").__s;
    }
    neko.@Boot.__class__ = neko.Boot;
}
{
    var @tmp = $new(null);
    @Std = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Std = @tmp;
    @tmp.prototype = @Std;
    @tmp.string = function(s) {
        return String.new($string(s));
    }
    @tmp.isOfType = function(v,t) {
        return neko.Boot.__instanceof(v,t);
    }
    @Std.__class__ = Std;
    @classes.Std = Std;
}
{
    var @tmp = $new(null);
    @String = @tmp;
    @tmp.toUpperCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 97) && (c <= 122) )
                $sset(s2,i,(c - 97) + 65);
            i += 1;
        }
        return String.new(s2);
    }
    @tmp.toString = function() {
        return this;
    }
    @tmp.toLowerCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 65) && (c <= 90) )
                $sset(s2,i,(c - 65) + 97);
            i += 1;
        }
        return String.new(s2);
    }
    @tmp.substring = function(startIndex,endIndex) {
        if ( endIndex == null )
            endIndex = this.length
        else
            if ( endIndex < 0 )
                endIndex = 0
            else
                if ( endIndex > this.length )
                    endIndex = this.length;


        if ( startIndex < 0 )
            startIndex = 0
        else
            if ( startIndex > this.length )
                startIndex = this.length;

        if ( startIndex > endIndex ) {
            var tmp = startIndex;
            startIndex = endIndex;
            endIndex = tmp;
        }
        return this.substr(startIndex,endIndex - startIndex);
    }
    @tmp.substr = function(pos,len) {
        if ( len == 0 )
            return String.new("");
        var sl = this.length;
        if ( len == null )
            len = sl;
        if ( pos == null )
            pos = 0;
        if ( (pos != 0) && (len < 0) )
            return String.new("");
        if ( pos < 0 ) {
            pos = (sl + pos);
            if ( pos < 0 )
                pos = 0;
        }
        else
            if ( len < 0 )
                len = ((sl + len) - pos);

        if ( (pos + len) > sl )
            len = (sl - pos);
        if ( (pos < 0) || (len <= 0) )
            return String.new("");
        return String.new($ssub(this.__s,pos,len));
    }
    @tmp.split = function(delimiter) {
        var l = String.__split(this.__s,delimiter.__s);
        var a = Array.new();
        if ( l == null ) {
            a.push(String.new(""));
            return a;
        }
        while ( true ) {
            a.push(String.new(l[0]));
            l = l[1];
            if ( $not(( l != null )) )
                break;;
        }
        return a;
    }
    @tmp.length = null;
    @tmp.lastIndexOf = function(str,startIndex) {
        var last = -1;
        var l = $ssize(this.__s);
        if ( startIndex == null )
            startIndex = l;
        if ( $ssize(str.__s) == 0 ) {
            if ( startIndex > l )
                return l
            else
                return startIndex
        }
        while ( true ) {
            var p;
            try {
                p = $sfind(this.__s,last + 1,str.__s);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var _g = @tmp;
                    {
                        {
                            null;
                        }
                        p = null;
                    }
                }
                else
                    $rethrow(@tmp)
            }
            if ( (p == null) || (p > startIndex) )
                return last;
            last = p;
        }
        return null;
    }
    @tmp.indexOf = function(str,startIndex) {
        var l = $ssize(this.__s);
        if ( (startIndex == null) || (startIndex < (0 - l)) )
            startIndex = 0;
        if ( (str == String.new("")) && (startIndex >= l) )
            return l;
        if ( startIndex > l )
            return -1;
        if ( $ssize(str.__s) == 0 ) {
            if ( startIndex < 0 )
                return l + startIndex
            else
                return startIndex
        }
        var p;
        try {
            p = $sfind(this.__s,startIndex,str.__s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var _g = @tmp;
                {
                    {
                        null;
                    }
                    p = null;
                }
            }
            else
                $rethrow(@tmp)
        }
        if ( p == null )
            return -1;
        return p;
    }
    @tmp.charCodeAt = function(index) {
        return $sget(this.__s,index);
    }
    @tmp.charAt = function(index) {
        try {
            var s = $smake(1);
            $sset(s,0,$sget(this.__s,index));
            return String.new(s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var _g = @tmp;
                {
                    {
                        null;
                    }
                    return String.new("");
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.__radd = function(s) {
        return String.new($string(s) + this.__s);
    }
    @tmp.__compare = function(o) {
        return $compare(this.__s,o.__s);
    }
    @tmp.__add = function(s) {
        var tmp = $string(s);
        return String.new(this.__s + tmp);
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    String = @tmp;
    @tmp.prototype = @String;
    @tmp.fromCharCode = function(code) {
        var s = $smake(1);
        $sset(s,0,code);
        return String.new(s);
    }
    @tmp.__split = $loader.loadprim(("std" + "@") + "string_split",2);
    @tmp.__is_String = null;
    @tmp.__construct__ = function(string) {
        if ( $typeof(string) != $tstring )
            string = $string(string);
        this.__s = string;
        this.length = $ssize(string);
        return null;
    }
    @tmp.new = function(string) {
        var @o = $new(null);
        $objsetproto(@o,@String);
        $call(this.__construct__,@o,$array(string));
        return @o;
    }
    @String.__class__ = String;
    @classes.String = String;
}
{
    var @tmp = $new(null);
    @StringBuf = @tmp;
    @tmp.b = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    StringBuf = @tmp;
    @tmp.prototype = @StringBuf;
    @tmp.__to_string = $loader.loadprim(("std" + "@") + "buffer_string",1);
    @tmp.__make = $loader.loadprim(("std" + "@") + "buffer_new",0);
    @tmp.__add_char = $loader.loadprim(("std" + "@") + "buffer_add_char",2);
    @tmp.__add = $loader.loadprim(("std" + "@") + "buffer_add",2);
    @tmp.__construct__ = function() {
        this.b = StringBuf.__make();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@StringBuf);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @StringBuf.__class__ = StringBuf;
    @classes.StringBuf = StringBuf;
}
{
    var @tmp = $new(null);
    haxe.@Exception = @tmp;
    @tmp.unwrap = function() {
        return this.__nativeException;
    }
    @tmp.get_native = function() {
        return this.__nativeException;
    }
    @tmp.__skipStack = null;
    @tmp.__previousException = null;
    @tmp.__nativeStack = null;
    @tmp.__nativeException = null;
    @tmp.__exceptionMessage = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.Exception = @tmp;
    @tmp.prototype = haxe.@Exception;
    @tmp.thrown = function(value) {
        if ( Std.isOfType(value,haxe.Exception) )
            return value.get_native()
        else {
            var e = haxe.ValueException.new(value,null,null);
            e.__skipStack ++= 1;
            return e;
        }
        return null;
    }
    @tmp.caught = function(value) {
        if ( Std.isOfType(value,haxe.Exception) )
            return value
        else
            return haxe.ValueException.new(value,null,value)
        return null;
    }
    @tmp.__construct__ = function(message,previous,native) {
        this.__skipStack = 0;
        this.__exceptionMessage = message;
        this.__previousException = previous;
        if ( native != null ) {
            this.__nativeStack = haxe.NativeStackTrace.exceptionStack();
            this.__nativeException = native;
        }
        else {
            this.__nativeStack = {
                skip => 1, 
                stack => $callstack()

            };
            this.__skipStack ++= 1;
            this.__nativeException = this;
        }
        return null;
    }
    @tmp.new = function(message,previous,native) {
        var @o = $new(null);
        $objsetproto(@o,haxe.@Exception);
        $call(this.__construct__,@o,$array(message,previous,native));
        return @o;
    }
    haxe.@Exception.__class__ = haxe.Exception;
    haxe.@Exception.__properties__ = {
        get_native => "get_native"

    };
}
{
    var @tmp = $new(null);
    haxe.@NativeStackTrace = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.NativeStackTrace = @tmp;
    @tmp.prototype = haxe.@NativeStackTrace;
    @tmp.saveStack = function(exception) {
        return null;
    }
    @tmp.exceptionStack = function() {
        return {
            skip => 0, 
            stack => $excstack()

        };
    }
    haxe.@NativeStackTrace.__class__ = haxe.NativeStackTrace;
}
{
    var @tmp = $new(null);
    haxe.@ValueException = @tmp;
    @tmp.value = null;
    @tmp.unwrap = function() {
        return this.value;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.ValueException = @tmp;
    @tmp.prototype = haxe.@ValueException;
    @tmp.__construct__ = function(value,previous,native) {
        $call(haxe.Exception.__construct__,this,$array(Std.string(value),previous,native));
        this.value = value;
        return null;
    }
    @tmp.new = function(value,previous,native) {
        var @o = $new(null);
        $objsetproto(@o,haxe.@ValueException);
        $call(this.__construct__,@o,$array(value,previous,native));
        return @o;
    }
    @tmp.__super__ = haxe.Exception;
    $objsetproto(haxe.@ValueException,haxe.@Exception);
    haxe.@ValueException.__class__ = haxe.ValueException;
}
{
    var @tmp = $new(null);
    neko.@NativeArray = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.NativeArray = @tmp;
    @tmp.prototype = neko.@NativeArray;
    neko.@NativeArray.__class__ = neko.NativeArray;
}
{
    var @tmp = $new(null);
    haxe.iterators.@ArrayIterator = @tmp;
    @tmp.next = function() {
        return this.array[this.current ++= 1];
    }
    @tmp.hasNext = function() {
        return this.current < this.array.length;
    }
    @tmp.current = null;
    @tmp.array = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.iterators.ArrayIterator = @tmp;
    @tmp.prototype = haxe.iterators.@ArrayIterator;
    @tmp.__construct__ = function(array) {
        this.current = 0;
        this.array = array;
        return null;
    }
    @tmp.new = function(array) {
        var @o = $new(null);
        $objsetproto(@o,haxe.iterators.@ArrayIterator);
        $call(this.__construct__,@o,$array(array));
        return @o;
    }
    haxe.iterators.@ArrayIterator.__class__ = haxe.iterators.ArrayIterator;
}
{
    var @tmp = $new(null);
    haxe.iterators.@ArrayKeyValueIterator = @tmp;
    @tmp.array = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.iterators.ArrayKeyValueIterator = @tmp;
    @tmp.prototype = haxe.iterators.@ArrayKeyValueIterator;
    @tmp.__construct__ = function(array) {
        this.array = array;
        return null;
    }
    @tmp.new = function(array) {
        var @o = $new(null);
        $objsetproto(@o,haxe.iterators.@ArrayKeyValueIterator);
        $call(this.__construct__,@o,$array(array));
        return @o;
    }
    haxe.iterators.@ArrayKeyValueIterator.__class__ = haxe.iterators.ArrayKeyValueIterator;
}
{
    neko.Boot.__classes = @classes;
    neko.Boot.__init();
}
haxe.iterators.ArrayKeyValueIterator.__name__ = Array.new1($array(String.new("haxe"),String.new("iterators"),String.new("ArrayKeyValueIterator")),3);
haxe.iterators.ArrayIterator.__name__ = Array.new1($array(String.new("haxe"),String.new("iterators"),String.new("ArrayIterator")),3);
neko.NativeArray.__name__ = Array.new1($array(String.new("neko"),String.new("NativeArray")),2);
haxe.ValueException.__name__ = Array.new1($array(String.new("haxe"),String.new("ValueException")),2);
haxe.NativeStackTrace.__name__ = Array.new1($array(String.new("haxe"),String.new("NativeStackTrace")),2);
haxe.Exception.__name__ = Array.new1($array(String.new("haxe"),String.new("Exception")),2);
StringBuf.__name__ = Array.new1($array(String.new("StringBuf")),1);
String.__name__ = Array.new1($array(String.new("String")),1);
Std.__name__ = Array.new1($array(String.new("Std")),1);
neko.Boot.__name__ = Array.new1($array(String.new("neko"),String.new("Boot")),2);
Math.__name__ = Array.new1($array(String.new("Math")),1);
Date.__name__ = Array.new1($array(String.new("Date")),1);
Array.__name__ = Array.new1($array(String.new("Array")),1);
neko.Lib.__name__ = Array.new1($array(String.new("neko"),String.new("Lib")),2);
try {
    var msort = $array(neko.Lib.load(String.new("std"),String.new("merge_sort"),3));
    Array.prototype.sort = function(cmp) {
        msort[0](this.__a,this.length,cmp);
        return null;
    }
}
catch @tmp {
    if $typeof(@tmp) == $tstring
        @tmp = String.new(@tmp);
    if true {
        var _g = @tmp;
        {
            {
                null;
            }
        }
    }
    else
        $rethrow(@tmp)
}
{
    var M = Math;
    Math.__rnd = neko.Lib.load(String.new("std"),String.new("random_new"),0)();
    M.PI = neko.Lib.load(String.new("std"),String.new("math_pi"),0)();
    M.NaN = (0.0 / 0.0);
    M.POSITIVE_INFINITY = (1.0 / 0.0);
    M.NEGATIVE_INFINITY = (0 - M.POSITIVE_INFINITY);
    M.abs = neko.Lib.load(String.new("std"),String.new("math_abs"),1);
    M.sin = neko.Lib.load(String.new("std"),String.new("math_sin"),1);
    M.cos = neko.Lib.load(String.new("std"),String.new("math_cos"),1);
    M.atan2 = neko.Lib.load(String.new("std"),String.new("math_atan2"),2);
    M.tan = neko.Lib.load(String.new("std"),String.new("math_tan"),1);
    M.exp = neko.Lib.load(String.new("std"),String.new("math_exp"),1);
    M.log = neko.Lib.load(String.new("std"),String.new("math_log"),1);
    M.sqrt = neko.Lib.load(String.new("std"),String.new("math_sqrt"),1);
    M.round = neko.Lib.load(String.new("std"),String.new("math_round"),1);
    M.floor = neko.Lib.load(String.new("std"),String.new("math_floor"),1);
    M.ceil = neko.Lib.load(String.new("std"),String.new("math_ceil"),1);
    M.atan = neko.Lib.load(String.new("std"),String.new("math_atan"),1);
    M.asin = neko.Lib.load(String.new("std"),String.new("math_asin"),1);
    M.acos = neko.Lib.load(String.new("std"),String.new("math_acos"),1);
    M.pow = neko.Lib.load(String.new("std"),String.new("math_pow"),2);
    var tmp;
    try {
        tmp = neko.Lib.load(String.new("std"),String.new("math_fceil"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var _g = @tmp;
            {
                {
                    null;
                }
                tmp = M.ceil;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.fceil = tmp;
    var tmp;
    try {
        tmp = neko.Lib.load(String.new("std"),String.new("math_ffloor"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var _g = @tmp;
            {
                {
                    null;
                }
                tmp = M.floor;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.ffloor = tmp;
    var tmp;
    try {
        tmp = neko.Lib.load(String.new("std"),String.new("math_fround"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var _g = @tmp;
            {
                {
                    null;
                }
                tmp = M.round;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.fround = tmp;
}
{
    Int = {
        __name__ => Array.new1($array(String.new("Int")),1)

    };
    Float = {
        __name__ => Array.new1($array(String.new("Float")),1)

    };
    Bool = {
        __ename__ => Array.new1($array(String.new("Bool")),1)

    };
    Dynamic = {
        __name__ => Array.new1($array(String.new("Dynamic")),1)

    };
    Class = {
        __name__ => Array.new1($array(String.new("Class")),1)

    };
    Enum = $new(null);
    var cl = neko.Boot.__classes;
    cl.Int = Int;
    cl.Float = Float;
    cl.Bool = Bool;
    cl.Dynamic = Dynamic;
    cl.Class = Class;
    cl.Enum = Enum;
}
String.__is_String = true;
Array.__hx_toString_depth = 0;
Date.date_format = neko.Lib.load(String.new("std"),String.new("date_format"),2);
Date.date_set_hour = neko.Lib.load(String.new("std"),String.new("date_set_hour"),4);
Date.date_set_day = neko.Lib.load(String.new("std"),String.new("date_set_day"),4);
Math._rand_float = neko.Lib.load(String.new("std"),String.new("random_float"),1);
Math._rand_int = neko.Lib.load(String.new("std"),String.new("random_int"),2);
String.__is_String = true;
String.__split = neko.Lib.load(String.new("std"),String.new("string_split"),2);
StringBuf.__make = neko.Lib.load(String.new("std"),String.new("buffer_new"),0);
StringBuf.__add = neko.Lib.load(String.new("std"),String.new("buffer_add"),2);
StringBuf.__add_char = neko.Lib.load(String.new("std"),String.new("buffer_add_char"),2);
StringBuf.__to_string = neko.Lib.load(String.new("std"),String.new("buffer_string"),1);
